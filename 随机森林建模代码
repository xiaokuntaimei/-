导入包
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve, auc
from scipy import stats
from matplotlib import pyplot as plt
from sklearn.metrics import roc_curve, roc_auc_score
导入表格（所有筛选后数据汇总表，或者是单独建模表）
data = pd.read_csv('筛选后表格.csv')
定义自变量因变量
X = data.drop('target', axis=1)
y = data['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
导入模型
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
设定模型规则
from sklearn.tree import DecisionTreeClassifier
DT = DecisionTreeClassifier(random_state=1, max_depth=6) # 深度设置为4
DT.fit(X_train, y_train)
导入作图包
from sklearn import tree
import graphviz
import pydotplus  
作图
from IPython.display import Image 
dot_data = tree.export_graphviz(DT, out_file=None, 
                         feature_names=X_train.columns,  
                         class_names=['0','1'],  
                         filled=True, rounded=True,  
                         special_characters=True)  
graph = pydotplus.graph_from_dot_data(dot_data)  
Image(graph.create_png())
计算准确度，敏感度，特异度
y_pred = rf.predict(X_test)
accuracy = np.mean(y_pred == y_test)
sensitivity = np.sum((y_pred == 1) & (y_test == 1)) / np.sum(y_test == 1)
specificity = np.sum((y_pred == 0) & (y_test == 0)) / np.sum(y_test == 0)
print(sensitivity,specificity,accuracy)
又算了一遍
y_pred = rf.predict(X_test)
sensitivity = np.sum((y_test == 1) & (y_pred == 1)) / np.sum(y_test == 1)
specificity = np.sum((y_test == 0) & (y_pred == 0)) / np.sum(y_test == 0)
print(sensitivity,specificity)

计算曲线下面积

y_pred_proba = rf.predict_proba(X_test)[:, 1]
fpr, tpr, _ = roc_curve(y_test, y_pred_proba)
auc_scores = auc(fpr, tpr)
fpr, tpr, thresholds = roc_curve(y_test, rf.predict_proba(X_test)[:, 1])
mean_tpr = np.interp(np.linspace(0, 1, 100), fpr, tpr)
mean_tpr = 0.0
mean_auc = auc(fpr, tpr)
std_auc = np.std(auc_scores)
print(mean_auc,std_auc)
绘制曲线
plt.plot(fpr,tpr,color='darkorange',label='ROC (area = %0.2f)' % auc_value)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Her2_ROC')
plt.legend(loc="lower right")
plt.savefig('suhan.jpg',dpi=1600)
plt.show()
